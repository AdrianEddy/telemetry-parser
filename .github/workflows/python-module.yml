name: Python-module

on:
  push:
    tags: [ 'v*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  #release-crates-io:
  #  name: Release crates.io
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: actions-rs/toolchain@v1
  #      with:
  #        profile: minimal
  #        toolchain: stable
  #        override: true
  #    - uses: actions-rs/cargo@v1
  #      with:
  #        command: login
  #        args: ${{ secrets.CRATES_IO_TOKEN }}
  #    - uses: actions-rs/cargo@v1
  #      with:
  #        command: publish

  release-pypi:
    name: Release PyPI
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
        python-version: [3.6, 3.7, 3.8, 3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}

      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools

      - name: Build wheel with Maturin - Linux
        if: matrix.os == 'ubuntu-latest' && ${{ matrix.python-version }} == '3.9'
        run: |
          maturin list-python
          cd bin/python-module
          docker run --rm -v $(pwd):/io konstin2/maturin build --release --out target/wheels -i python${{matrix.python-version}}
        shell: bash

      - name: Publish to pypi (with sdist)
        if: matrix.os == 'ubuntu-latest'
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        #run: cd bin/python-module && maturin publish --release -u __token__ --target ${{ matrix.target }}
        run: cd bin/python-module && maturin build --release --target ${{ matrix.target }}
      
      # PyPI doesn't support uploading windows arm64 wheels yet, so we only upload it to GitHub releases
      - name: Publish to pypi (windows aarch64)
        if: matrix.target == 'aarch64-pc-windows-msvc'
        run: cd bin/python-module && maturin build --release --target ${{ matrix.target }} --no-sdist

      - name: Publish to pypi (without sdist)
        if: ${{ matrix.target != 'x86_64-unknown-linux-musl' && matrix.target != 'aarch64-pc-windows-msvc' }}
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        #run: cd bin/python-module && maturin publish --release -u __token__ --target ${{ matrix.target }} --no-sdist
        run: cd bin/python-module && maturin build --release --target ${{ matrix.target }} --no-sdist

      - name: Publish to pypi (macOS universal2)
        if: matrix.target == 'x86_64-apple-darwin' && ${{ matrix.python-version }} == '3.8'
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: '10.9'
          PYO3_CROSS_LIB_DIR: /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib
        #run: |
        #  rustup target add aarch64-apple-darwin
        #  maturin publish --release -u __token__ --no-sdist --universal2
        run: |
          rustup target add aarch64-apple-darwin
          cd bin/python-module
          maturin build --release --no-sdist --universal2

      - name: Save Wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: target/wheels/*.whl
        
  release-musl-pypi:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", manylinux: "2014" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", manylinux: "2014"},
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", manylinux: "2010"},
        ]
        python-version: [3.6, 3.7, 3.8, 3.9]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}

      - uses: actions/checkout@v2
      - name: Build and publish wheel
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        # change to publish
        run: |
          sudo python3 -m pip install maturin
          maturin list-python
          cd bin/python-module
          maturin build -u __token__ --no-sdist -i python${{matrix.python-version}} \
            --target ${{ matrix.platform.target }} \
            --manylinux ${{ matrix.platform.manylinux }}
      - name: Save Wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: target/wheels/*.whl
        
